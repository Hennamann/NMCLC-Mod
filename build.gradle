buildscript {
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'maven-publish'
//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.

version = "1.0.0-" + System.getenv('buildNumber')
group = "com.henrikstabell.nmclc" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "nmclc"

sourceCompatibility = targetCompatibility = "1.6" // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = "1.6"
}

minecraft {
    version = "1.8.9-11.15.1.2318-1.8.9"
    runDir = "run"
    
    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "stable_20"
    makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    clientJvmArgs = ["-Dfml.coreMods.load=com.henrikstabell.nmclc.NMCLCCoreMod"]
    serverJvmArgs = ["-Dfml.coreMods.load=com.henrikstabell.nmclc.NMCLCCoreMod"]
}

dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"
      
    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // the 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    //provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // the deobf configurations:  'deobfCompile' and 'deobfProvided' are the same as the normal compile and provided,
    // except that these dependencies get remapped to your current MCP mappings
    //deobfCompile 'com.mod-buildcraft:buildcraft:6.0.8:dev'
    //deobfProvided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            srcDir 'resources'
        }
    }
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

jar {
    classifier = 'universal'
    manifest {
        attributes 'FMLCorePluginContainsFMLMod': 'true'
        attributes "FMLCorePlugin": "com.henrikstabell.nmclc.NMCLCCoreMod"
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
    manifest {
        attributes 'FMLCorePluginContainsFMLMod': 'true'
        attributes "FMLCorePlugin": "com.henrikstabell.nmclc.NMCLCCoreMod"
    }
}

task deobfJar(type: Jar) {
    from(sourceSets.main.output)
    classifier = 'dev'
    manifest {
        attributes 'FMLCorePluginContainsFMLMod': 'true'
        attributes "FMLCorePlugin": "com.henrikstabell.nmclc.NMCLCCoreMod"
    }
}

task exportJavadoc(type: Javadoc) {
    source = sourceSets.main.allSource
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

publishing {
    tasks.publish.dependsOn 'build'
    publications {
        mavenJava(MavenPublication) {
            groupId 'com.henrikstabell.nmclc'
            artifactId 'NMCLC-1.9'
            from components.java

            artifact sourcesJar
            artifact deobfJar
        }
    }

    repositories {
            maven { 
                credentials {
                        username System.getenv('userMaven')
                        password System.getenv('passMaven')
                    }
                    url System.getenv('urlMaven')
            }
       }
}

artifacts {
    archives sourcesJar
    archives deobfJar
}